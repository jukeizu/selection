// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: selection.proto

package selectionpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateSelectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string    `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	InstanceId string    `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	UserId     string    `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServerId   string    `protobuf:"bytes,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Randomize  bool      `protobuf:"varint,5,opt,name=randomize,proto3" json:"randomize,omitempty"`
	BatchSize  int32     `protobuf:"varint,6,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	SortMethod string    `protobuf:"bytes,7,opt,name=sort_method,json=sortMethod,proto3" json:"sort_method,omitempty"`
	SortKey    string    `protobuf:"bytes,8,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	Options    []*Option `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateSelectionRequest) Reset() {
	*x = CreateSelectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_selection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelectionRequest) ProtoMessage() {}

func (x *CreateSelectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_selection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelectionRequest.ProtoReflect.Descriptor instead.
func (*CreateSelectionRequest) Descriptor() ([]byte, []int) {
	return file_selection_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSelectionRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CreateSelectionRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateSelectionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateSelectionRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *CreateSelectionRequest) GetRandomize() bool {
	if x != nil {
		return x.Randomize
	}
	return false
}

func (x *CreateSelectionRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *CreateSelectionRequest) GetSortMethod() string {
	if x != nil {
		return x.SortMethod
	}
	return ""
}

func (x *CreateSelectionRequest) GetSortKey() string {
	if x != nil {
		return x.SortKey
	}
	return ""
}

func (x *CreateSelectionRequest) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionId string            `protobuf:"bytes,1,opt,name=option_id,json=optionId,proto3" json:"option_id,omitempty"`
	Content  string            `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_selection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_selection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_selection_proto_rawDescGZIP(), []int{1}
}

func (x *Option) GetOptionId() string {
	if x != nil {
		return x.OptionId
	}
	return ""
}

func (x *Option) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Option) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateSelectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batches []*Batch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *CreateSelectionReply) Reset() {
	*x = CreateSelectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_selection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelectionReply) ProtoMessage() {}

func (x *CreateSelectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_selection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelectionReply.ProtoReflect.Descriptor instead.
func (*CreateSelectionReply) Descriptor() ([]byte, []int) {
	return file_selection_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSelectionReply) GetBatches() []*Batch {
	if x != nil {
		return x.Batches
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*BatchOption `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_selection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_selection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_selection_proto_rawDescGZIP(), []int{3}
}

func (x *Batch) GetOptions() []*BatchOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type BatchOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Option *Option `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *BatchOption) Reset() {
	*x = BatchOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_selection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOption) ProtoMessage() {}

func (x *BatchOption) ProtoReflect() protoreflect.Message {
	mi := &file_selection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOption.ProtoReflect.Descriptor instead.
func (*BatchOption) Descriptor() ([]byte, []int) {
	return file_selection_proto_rawDescGZIP(), []int{4}
}

func (x *BatchOption) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BatchOption) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

type ParseSelectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ServerId   string `protobuf:"bytes,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Content    string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ParseSelectionRequest) Reset() {
	*x = ParseSelectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_selection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseSelectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseSelectionRequest) ProtoMessage() {}

func (x *ParseSelectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_selection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseSelectionRequest.ProtoReflect.Descriptor instead.
func (*ParseSelectionRequest) Descriptor() ([]byte, []int) {
	return file_selection_proto_rawDescGZIP(), []int{5}
}

func (x *ParseSelectionRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ParseSelectionRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ParseSelectionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ParseSelectionRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ParseSelectionRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type RankedOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   int32   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Option *Option `protobuf:"bytes,2,opt,name=option,proto3" json:"option,omitempty"`
	Number int32   `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *RankedOption) Reset() {
	*x = RankedOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_selection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankedOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankedOption) ProtoMessage() {}

func (x *RankedOption) ProtoReflect() protoreflect.Message {
	mi := &file_selection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankedOption.ProtoReflect.Descriptor instead.
func (*RankedOption) Descriptor() ([]byte, []int) {
	return file_selection_proto_rawDescGZIP(), []int{6}
}

func (x *RankedOption) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankedOption) GetOption() *Option {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *RankedOption) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ParseSelectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankedOptions []*RankedOption `protobuf:"bytes,1,rep,name=ranked_options,json=rankedOptions,proto3" json:"ranked_options,omitempty"`
}

func (x *ParseSelectionReply) Reset() {
	*x = ParseSelectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_selection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseSelectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseSelectionReply) ProtoMessage() {}

func (x *ParseSelectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_selection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseSelectionReply.ProtoReflect.Descriptor instead.
func (*ParseSelectionReply) Descriptor() ([]byte, []int) {
	return file_selection_proto_rawDescGZIP(), []int{7}
}

func (x *ParseSelectionReply) GetRankedOptions() []*RankedOption {
	if x != nil {
		return x.RankedOptions
	}
	return nil
}

var File_selection_proto protoreflect.FileDescriptor

var file_selection_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x22, 0xae,
	0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x52, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x57,
	0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xc2, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d,
	0x2e, 0x3b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_selection_proto_rawDescOnce sync.Once
	file_selection_proto_rawDescData = file_selection_proto_rawDesc
)

func file_selection_proto_rawDescGZIP() []byte {
	file_selection_proto_rawDescOnce.Do(func() {
		file_selection_proto_rawDescData = protoimpl.X.CompressGZIP(file_selection_proto_rawDescData)
	})
	return file_selection_proto_rawDescData
}

var file_selection_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_selection_proto_goTypes = []interface{}{
	(*CreateSelectionRequest)(nil), // 0: selectionpb.CreateSelectionRequest
	(*Option)(nil),                 // 1: selectionpb.Option
	(*CreateSelectionReply)(nil),   // 2: selectionpb.CreateSelectionReply
	(*Batch)(nil),                  // 3: selectionpb.Batch
	(*BatchOption)(nil),            // 4: selectionpb.BatchOption
	(*ParseSelectionRequest)(nil),  // 5: selectionpb.ParseSelectionRequest
	(*RankedOption)(nil),           // 6: selectionpb.RankedOption
	(*ParseSelectionReply)(nil),    // 7: selectionpb.ParseSelectionReply
	nil,                            // 8: selectionpb.Option.MetadataEntry
}
var file_selection_proto_depIdxs = []int32{
	1, // 0: selectionpb.CreateSelectionRequest.options:type_name -> selectionpb.Option
	8, // 1: selectionpb.Option.metadata:type_name -> selectionpb.Option.MetadataEntry
	3, // 2: selectionpb.CreateSelectionReply.batches:type_name -> selectionpb.Batch
	4, // 3: selectionpb.Batch.options:type_name -> selectionpb.BatchOption
	1, // 4: selectionpb.BatchOption.option:type_name -> selectionpb.Option
	1, // 5: selectionpb.RankedOption.option:type_name -> selectionpb.Option
	6, // 6: selectionpb.ParseSelectionReply.ranked_options:type_name -> selectionpb.RankedOption
	0, // 7: selectionpb.Selection.CreateSelection:input_type -> selectionpb.CreateSelectionRequest
	5, // 8: selectionpb.Selection.ParseSelection:input_type -> selectionpb.ParseSelectionRequest
	2, // 9: selectionpb.Selection.CreateSelection:output_type -> selectionpb.CreateSelectionReply
	7, // 10: selectionpb.Selection.ParseSelection:output_type -> selectionpb.ParseSelectionReply
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_selection_proto_init() }
func file_selection_proto_init() {
	if File_selection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_selection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_selection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_selection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_selection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_selection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_selection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseSelectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_selection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankedOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_selection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseSelectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_selection_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_selection_proto_goTypes,
		DependencyIndexes: file_selection_proto_depIdxs,
		MessageInfos:      file_selection_proto_msgTypes,
	}.Build()
	File_selection_proto = out.File
	file_selection_proto_rawDesc = nil
	file_selection_proto_goTypes = nil
	file_selection_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SelectionClient is the client API for Selection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SelectionClient interface {
	CreateSelection(ctx context.Context, in *CreateSelectionRequest, opts ...grpc.CallOption) (*CreateSelectionReply, error)
	ParseSelection(ctx context.Context, in *ParseSelectionRequest, opts ...grpc.CallOption) (*ParseSelectionReply, error)
}

type selectionClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectionClient(cc grpc.ClientConnInterface) SelectionClient {
	return &selectionClient{cc}
}

func (c *selectionClient) CreateSelection(ctx context.Context, in *CreateSelectionRequest, opts ...grpc.CallOption) (*CreateSelectionReply, error) {
	out := new(CreateSelectionReply)
	err := c.cc.Invoke(ctx, "/selectionpb.Selection/CreateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selectionClient) ParseSelection(ctx context.Context, in *ParseSelectionRequest, opts ...grpc.CallOption) (*ParseSelectionReply, error) {
	out := new(ParseSelectionReply)
	err := c.cc.Invoke(ctx, "/selectionpb.Selection/ParseSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectionServer is the server API for Selection service.
type SelectionServer interface {
	CreateSelection(context.Context, *CreateSelectionRequest) (*CreateSelectionReply, error)
	ParseSelection(context.Context, *ParseSelectionRequest) (*ParseSelectionReply, error)
}

// UnimplementedSelectionServer can be embedded to have forward compatible implementations.
type UnimplementedSelectionServer struct {
}

func (*UnimplementedSelectionServer) CreateSelection(context.Context, *CreateSelectionRequest) (*CreateSelectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSelection not implemented")
}
func (*UnimplementedSelectionServer) ParseSelection(context.Context, *ParseSelectionRequest) (*ParseSelectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseSelection not implemented")
}

func RegisterSelectionServer(s *grpc.Server, srv SelectionServer) {
	s.RegisterService(&_Selection_serviceDesc, srv)
}

func _Selection_CreateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServer).CreateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selectionpb.Selection/CreateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServer).CreateSelection(ctx, req.(*CreateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Selection_ParseSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectionServer).ParseSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selectionpb.Selection/ParseSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectionServer).ParseSelection(ctx, req.(*ParseSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Selection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "selectionpb.Selection",
	HandlerType: (*SelectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSelection",
			Handler:    _Selection_CreateSelection_Handler,
		},
		{
			MethodName: "ParseSelection",
			Handler:    _Selection_ParseSelection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "selection.proto",
}
